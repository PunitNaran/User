// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package users

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Profile struct {
	_tab flatbuffers.Table
}

func GetRootAsProfile(buf []byte, offset flatbuffers.UOffsetT) *Profile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Profile{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Profile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Profile) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Profile) AvatarName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Profile) Initals() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Profile) Verification(obj *Verification) *Verification {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Verification)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ProfileStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ProfileAddAvatarName(builder *flatbuffers.Builder, avatarName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(avatarName), 0)
}
func ProfileAddInitals(builder *flatbuffers.Builder, initals flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(initals), 0)
}
func ProfileAddVerification(builder *flatbuffers.Builder, verification flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(verification), 0)
}
func ProfileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

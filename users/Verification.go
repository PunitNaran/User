// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package users

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Verification struct {
	_tab flatbuffers.Table
}

func GetRootAsVerification(buf []byte, offset flatbuffers.UOffsetT) *Verification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Verification{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Verification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Verification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Verification) EncryptedEmail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Verification) EncryptedMobileNo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Verification) EncryptedPass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Verification) IncorrectCounts() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Verification) MutateIncorrectCounts(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func VerificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func VerificationAddEncryptedEmail(builder *flatbuffers.Builder, encryptedEmail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(encryptedEmail), 0)
}
func VerificationAddEncryptedMobileNo(builder *flatbuffers.Builder, encryptedMobileNo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(encryptedMobileNo), 0)
}
func VerificationAddEncryptedPass(builder *flatbuffers.Builder, encryptedPass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(encryptedPass), 0)
}
func VerificationAddIncorrectCounts(builder *flatbuffers.Builder, incorrectCounts byte) {
	builder.PrependByteSlot(3, incorrectCounts, 0)
}
func VerificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
